import { Command } from 'commander';
import { readdir } from 'fs/promises';
import { dirname, join } from 'path';
import { errorX, warningX } from '../console.js';
import { getRedirects, wikiPath } from '../wiki.js';

async function getDirectories(path: string): Promise<string[]> {
	return (await readdir(path, { withFileTypes: true }))
		.filter((dirent) => dirent.isDirectory())
		.map((dirent) => join(path, dirent.name));
}

function redirectExists(path: string): boolean {
	return getRedirects()[path.toLowerCase()] != null;
}

const wikiDirectoryExistsCache: Partial<Record<string, string[]>> = {};

async function wikiDirectoryExists(path: string, strictCase: boolean): Promise<boolean> {
	if (path === '.') {
		wikiDirectoryExistsCache['.'] ??= await getDirectories(join(wikiPath, 'wiki'));
		return true;
	}

	if (!strictCase && wikiDirectoryExistsCache[path.toLowerCase()] != null) {
		return true;
	}

	const pathDirname = dirname(path.toLowerCase());

	// If the parent directory doesn't exist, this directory doesn't either
	if (!await wikiDirectoryExists(pathDirname, false)) {
		return false;
	}

	const directories = wikiDirectoryExistsCache[pathDirname];

	// The parent directory exists, so its directory listing has been cached.
	// This should never happen.
	if (directories == null) {
		throw new Error('Parent directory listing not cached');
	}

	const directory = directories.find(
		(directory) => directory.toLowerCase() === join(wikiPath, 'wiki', path).toLowerCase(),
	);

	if (directory == null) {
		return false;
	}

	wikiDirectoryExistsCache[path.toLowerCase()] ??= await getDirectories(directory);

	return !strictCase || directory === join(wikiPath, 'wiki', path);
}

export async function checkRedirects() {
	for (const [source, target] of (Object.entries(getRedirects()) as [string, string][])) {
		if (source.includes('#') || source.startsWith('/') || source.endsWith('/') || source.toLowerCase() !== source) {
			errorX(`Source of redirect "${source}" is formatted incorrectly (must have no leading or trailing slashes and be all lowercase)`);
			continue;
		}

		if (target.includes('/#') || target.startsWith('/') || target.endsWith('/')) {
			errorX(`Target of redirect "${source}" is formatted incorrectly (must have no leading or trailing slashes)`);
			continue;
		}

		if (await wikiDirectoryExists(source, false)) {
			warningX(`Redirect "${source}" is shadowed by an existing article and has no effect`);
			continue;
		}

		// "Sitemap" is a special-case redirect because its page is generated by the osu! website
		if (target === 'Sitemap') {
			continue;
		}

		if (redirectExists(target)) {
			warningX(`Redirect "${source}" targets another redirect`);
			continue;
		}

		// TODO: Check the section as well
		if (!await wikiDirectoryExists(target.split('#')[0], false)) {
			errorX(`Redirect "${source}" targets nonexistent article`);
			continue;
		}

		if (!await wikiDirectoryExists(target.split('#')[0], true)) {
			warningX(`Target of redirect "${source}" does not match the casing of the article directory`);
			continue;
		}
	}
}

export function checkRedirectsCommandBuilder() {
	return new Command('check-redirects')
		.description('Report errors in the redirects file')
		.action(checkRedirects);
}
