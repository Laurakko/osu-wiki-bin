#!/usr/bin/env node

const { readdirSync, readFileSync, writeFileSync } = require('fs');
const { safeLoad: yaml } = require('js-yaml');
const { join } = require('path');
const { nestedProperty } = require('./include');

function reEscape(text) {
    return text.replace(/[[\]\\^$.|?*+()]/g, '\\$&');
}

function translateTournament(content, originalInfo, translatedInfo) {
    const replaceContent = (property, beforeRe, afterRe, flags) => {
        const pattern =
            (beforeRe ? `(?<=${beforeRe})` : '') +
            reEscape(nestedProperty(originalInfo, property)) +
            (afterRe ? `(?=${afterRe})` : '');

        content = content.replace(
            new RegExp(pattern, flags),
            nestedProperty(translatedInfo, property)
        );
    };

    [
        ['title', '^# ', null, ''],
        ['info', '^', '$', 'm'],
        ['wc.title', '^## ', '$', 'm'],
        ['wc.info', '^', '$', 'm'],
        ['wc.owc', ' ', '$', 'm'],
        ['wc.twc', ' ', '$', 'm'],
        ['wc.cwc', ' ', '$', 'm'],
        ['wc.mwc', ' ', '$', 'm'],
        ['community.title', '^## ', '$', 'm'],
        ['community.info', '^', '$', 'm'],
        ['crowns.gold', '!\\[', '\\]\\[', 'g'],
        ['crowns.silver', '!\\[', '\\]\\[', 'g'],
        ['crowns.bronze', '!\\[', '\\]\\[', 'g'],
        ['crowns.first', ' "', '"', ''],
        ['crowns.second', ' "', '"', ''],
        ['crowns.third', ' "', '"', ''],
        ['table.name', '\\| ', ' \\|', 'g'],
        ['table.start', '\\| ', ' \\|', 'g'],
        ['table.end', '\\| ', ' \\|', 'g'],
        ['table.date', '\\| ', ' \\|', 'g'],
        ['see_also.title', '^## ', '$', 'm'],
        ['see_also.country_list', '\\[', '\\]\\(', ''],
        ['see_also.client_note', ' ', '$', 'm']
    ]
        .forEach(args => replaceContent(...args));

    // TODO: translate country names

    return content;
}

const metaPath = join(__dirname, `../meta/tournament-index`);
const tournamentPath = join(__dirname, '../wiki/Tournaments');
const englishContent = readFileSync(join(tournamentPath, 'en.md'), 'utf8');
const englishTranslationInfo = yaml(readFileSync(join(metaPath, 'en.yaml'), 'utf8'));

for (const filename of readdirSync(metaPath)) {
    if (filename === 'en.yaml')
        continue;

    const filenameMatch = filename.match(/^([a-z-]+)\.yaml$/);

    if (filenameMatch === null) {
        console.error(`Invalid translation file ${filename}`);
        continue;
    }

    const translatedContent = translateTournament(
        englishContent,
        englishTranslationInfo,
        yaml(readFileSync(join(metaPath, filename), 'utf8'))
    );

    writeFileSync(join(tournamentPath, `${filenameMatch[1]}.md`), translatedContent);
}
