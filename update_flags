#!/usr/bin/env node

const { readFileSync, writeFileSync } = require('fs');
const { join } = require('path');
const { replaceLineEndings } = require('./include');

function fixFlagRefs(content, flagNames) {
    const normalizedEndings = replaceLineEndings(content);

    content = normalizedEndings.content
        .replace(/\n*$/, '\n')
        .replace(/^\[flag_[A-Z_]+\]: \/wiki\/shared\/flag\/.+\n/gm, '')
        .replace(/\n*$/, '\n\n');

    const flags = new Set();

    for (const flagMatch of content.matchAll(/!\[[A-Z_]*\]\[flag_([A-Z_]+)\]/g))
        flags.add(flagMatch[1]);

    for (const flag of [...flags].sort()) {
        content += `[flag_${flag}]: /wiki/shared/flag/${flag}.gif`;

        if (flagNames[flag] !== undefined)
            content += ` "${flagNames[flag]}"`;

        content += '\n';
    }

    return replaceLineEndings(content, normalizedEndings.originalEnding).content;
}

const flagNamesByLocale = {};

for (const file of process.argv.slice(2)) {
    const localeMatch = file.match(/[a-z-]+\.md$/);
    const locale = localeMatch === null ? 'en.md' : localeMatch[0];
    let flagNames = flagNamesByLocale[locale];

    if (flagNames === undefined) {
        flagNames = {};

        try {
            const flagNamesFile = join(__dirname, '../meta/flag-references', locale);
            const flagNamesMd = readFileSync(flagNamesFile, 'utf8');

            for (const flagMatch of flagNamesMd.matchAll(/\[flag_([A-Z_]+)\].+\1\.gif "(.+)"/g))
                flagNames[flagMatch[1]] = flagMatch[2];
        } catch {}

        flagNamesByLocale[locale] = flagNames;
    }

    writeFileSync(file, fixFlagRefs(readFileSync(file, 'utf8'), flagNames));
}
