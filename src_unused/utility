#!/usr/bin/env node

const fs = require('fs');
const { groupMap, groupMembers, loadGroup, userLink } = require('./include');

async function checkGroup(group) {
    const file = loadGroup(group);

    const userIdsOnline = [];
    for (const groupId of groupMap[group]) {
        const members = await groupMembers(groupId);
        userIdsOnline.push(...members);
    }

    const userIdsLocal = [];
    const userSearch = /osu.ppy.sh\/users\/(\d+)/g;
    let match;
    while ((match = userSearch.exec(file)) !== null)
        userIdsLocal.push(match[1]);

    const missingFromLocal = userIdsOnline.filter(x => !userIdsLocal.includes(x));
    const missingFromOnline = userIdsLocal.filter(x => !userIdsOnline.includes(x));

    console.log('Users missing from file:');
    for (const u of missingFromLocal) {
        const user = await userLink(u, { flag: false, returnObj: true });
        console.log(`    #${user.user_id.toString().padEnd(8)} ${user.username}`);
    }
    console.log('Users in file that are not in group:');
    for (const u of missingFromOnline) {
        const user = await userLink(u, { flag: false, returnObj: true });
        console.log(`    #${user.user_id.toString().padEnd(8)} ${user.username}`);
    }
}

function ulToOl(path, line) {
    const file = fs.readFileSync(path, 'utf8');
    const lines = file.split('\n');

    for (let i = line - 1; lines[i].startsWith('- '); ++i)
        lines[i] = lines[i].replace(/^- /, (i - line + 2) + '. ');

    fs.writeFileSync(path, lines.join('\n'));
}

switch (process.argv[2]) {
    default:
        console.log('Usage:\n    --check-group <group>\n    --ul-to-ol <file> <line>');
        break;
    case '--check-group':
        checkGroup(process.argv[3]);
        break;
    case '--ul-to-ol':
        ulToOl(process.argv[3], process.argv[4]);
        break;
}
